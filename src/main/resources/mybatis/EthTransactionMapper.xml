<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cdkj.coin.dao.IEthTransactionDAO">
	<resultMap id="ethTransaction_DB_Result" type="com.cdkj.coin.domain.EthTransaction">
		<result column="id" property="id" />
		<result column="hash" property="hash" />
		<result column="nonce" property="nonce" />
		<result column="block_hash" property="blockHash" />
		<result column="block_number" property="blockNumber" />
		
		<result column="block_create_datetime" property="blockCreateDatetime" />
		<result column="transaction_index" property="transactionIndex" />
		<result column="from" property="from" />
		<result column="to" property="to" />
		<result column="value" property="value" />
		
		<result column="status" property="status" />
		<result column="sync_datetime" property="syncDatetime" />
		<result column="gas_price" property="gasPrice" />
		<result column="gas_limit" property="gasLimit" />
		<result column="gas_used" property="gasUsed" />
		
		<result column="gas_free" property="gasFree" />
		<result column="input" property="input" />
		<result column="public_key" property="publicKey" />
		<result column="raw" property="raw" />
		<result column="r" property="r" />
		
		<result column="s" property="s" />
	</resultMap>

	<sql id="where_condition">
		<trim prefix="WHERE" prefixOverrides="AND | OR">
		    <if test="hash != null and hash != '' ">
				AND t.hash = #{hash}
			</if>
			<if test="status != null and status != '' ">
				AND t.status = #{status}
			</if>
			<if test="blockCreateDatetimeStart != null and blockCreateDatetimeStart != ''">
			    AND t.block_create_datetime >= #{blockCreateDatetimeStart}
			</if>
			<if test="blockCreateDatetimeEnd != null and blockCreateDatetimeEnd != ''">
				<![CDATA[ AND t.block_create_datetime <= #{blockCreateDatetimeEnd}  ]]>
			</if>
			<if test="from != null and from != ''">
				 t.from = #{from} OR
			</if>
			<if test="to != null and to != ''">
				 t.to = #{to}
			</if>
		</trim>
	</sql>

	<sql id="ethTx">
		`id`,`hash`,`nonce`,`block_hash`,`block_number`,`block_create_datetime`,`transaction_index`,`from`,
		`to`,`value`,`status`,`sync_datetime`,`gas_price`,`gas_limit`,`gas_used`,`gas_fee`, `input`, 
		`public_key`,`raw`,`r`,`s`
	</sql>

	<update id="updateTxStatus" parameterType="com.cdkj.coin.domain.EthTransaction">
		UPDATE  tcoin_eth_transaction SET `status` = '1' where `hash` in
		<foreach collection="list" item="tx" open="(" separator="," close=")">
			#{tx.hash}
		</foreach>
	</update>

	<select id="select_ethTransaction" parameterType="ethTransaction" resultMap="ethTransaction_DB_Result">
		SELECT

		<include refid="ethTx"/>

		FROM
		tcoin_eth_transaction t
		<include refid="where_condition" />
		<trim prefix="ORDER BY ">
			<if test="order != null and order != '' ">
				t.${order}
			</if>
		</trim>
	</select>

	<select id="select_ethTransaction_count" parameterType="ethTransaction"
		resultType="java.lang.Long">
		SELECT count(1) FROM tcoin_eth_transaction t
		<include refid="where_condition" />
	</select>


	<insert id="insertEthTransaction" parameterType="com.cdkj.coin.domain.EthTransaction">
		INSERT INTO `tcoin_eth_transaction`(
			`hash`
			,`nonce`
			,`block_hash`
			,`block_number`
			,`block_create_datetime`
			
			,`transaction_index`
			,`from`
			,`to`
			,`value`
			,`status`
			
			,`sync_datetime`
			,`gas_price`
			,`gas_limit`
			,`gas_used`
			,`gas_fee`
			
			,`input`
			,`public_key`
			,`raw`
			,`r`
			,`s`
			)
		VALUES(
			#{hash} 
			,#{nonce} 
			,#{blockHash} 
			,#{blockNumber}
			,#{blockCreateDatetime}
			
			,#{transactionIndex}
			,#{from}
			,#{to}
			,#{value}
			,#{status}
			
			,#{syncDatetime}
			,#{gasPrice}
			,#{gasLimit}
			,#{gasUsed}
			,#{gasFee}
			
			,#{input}
			,#{publicKey}
			,#{raw}
			,#{r}
			,#{s}
		)
	</insert>

	<insert id="insertTxList" parameterType="List">

		INSERT INTO `tcoin_eth_transaction`(
		`hash`
			,`nonce`
			,`block_hash`
			,`block_number`
			,`block_create_datetime`
			
			,`transaction_index`
			,`from`
			,`to`
			,`value`
			,`status`
			
			,`sync_datetime`
			,`gas_price`
			,`gas_limit`
			,`gas_used`
			,`gas_fee`
			
			,`input`
			,`public_key`
			,`raw`
			,`r`
			,`s`
			)
		VALUES

		  <foreach collection="list" item="tx" separator=",">
			  (
			  #{tx.hash} 
			,#{tx.nonce} 
			,#{tx.blockHash} 
			,#{tx.blockNumber}
			,#{tx.blockCreateDatetime}
			
			,#{tx.transactionIndex}
			,#{tx.from}
			,#{tx.to}
			,#{tx.value}
			,#{tx.status}
			
			,#{tx.syncDatetime}
			,#{tx.gasPrice}
			,#{tx.gasLimit}
			,#{tx.gasUsed}
			,#{tx.gasFee}
			
			,#{tx.input}
			,#{tx.publicKey}
			,#{tx.raw}
			,#{tx.r}
			,#{tx.s}
			  )
		  </foreach>

	</insert>

</mapper>